package com.aexp.gmdl.db.component.verticle;

import static com.aexp.gmdl.db.component.constants.AppConstants.DB_JAR_ERROR;

import com.aexp.gmdl.db.component.service.TransactionalReferenceDataService;
import io.vertx.core.*;
import io.vertx.core.json.JsonObject;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.slf4j.Marker;

public class DBComponentDirectInstance {
  private static final String DEFAULT_EPAAS_ENV;
  private static final String EPAAS_ENV;
  private static String env;

  static {
    DEFAULT_EPAAS_ENV = "e0";
    EPAAS_ENV = "EPAAS_ENV";
    env = System.getenv(EPAAS_ENV);
    env = Objects.requireNonNullElse(env, DEFAULT_EPAAS_ENV);
  }

  private static final Logger LOGGER = LoggerFactory.getLogger(DBComponentDirectInstance.class);

  public Future<Void> init(Vertx vertx, JsonObject config, Marker classMarker) {

    Promise<Void> startPromise = Promise.promise();

    List<Future> listCache = new ArrayList<>();

    TransactionalReferenceDataService transactionalReferenceDataService =
        TransactionalReferenceDataService.create(vertx, config, classMarker);

    listCache.add(
        new LoadCacheMapDataVerticle()
            .init(vertx, config, transactionalReferenceDataService, classMarker));
    listCache.add(
        new DBHealthCheckVerticle()
            .init(vertx, config, transactionalReferenceDataService, classMarker));

    CompositeFuture.all(listCache)
        .onComplete(
            ar -> {
              if (ar.succeeded()) {
                LOGGER.info(classMarker, "DB_JAR : Deployed db jar successfully");
                startPromise.complete();
              } else {
                LOGGER.error(
                    classMarker,
                    "{} : Failed while deploying db component deployment Reason: {}, Trace: {}",
                    DB_JAR_ERROR,
                    ar.cause() != null ? ar.cause().getLocalizedMessage() : "Cause is null",
                    ar.cause());
                startPromise.fail(ar.cause());
              }
            });

    return startPromise.future();
  }
}
