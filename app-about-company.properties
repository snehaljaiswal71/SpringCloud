import com.aexp.gmdl.data.processor.handler.AddressModernizationHandler;
import com.aexp.gmdl.data.processor.service.MessageSubscriberService;
import com.aexp.gmdl.db.component.service.TransactionalReferenceDataService;
import com.aexp.gmdl.kafka.component.service.KafkaPublisherService;
import io.vertx.core.Vertx;
import io.vertx.core.json.JsonObject;
import io.vertx.core.Promise;
import io.vertx.core.impl.future.PromiseImpl;
import org.junit.Before;
import org.junit.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.slf4j.Logger;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

public class AddressModernizationProcessorVerticleTest {

    private AddressModernizationProcessorVerticle verticle;
    private Vertx vertx;

    @Mock
    private MessageSubscriberService mockConsumerService;

    @Mock
    private AddressModernizationHandler mockHandler;

    @Mock
    private TransactionalReferenceDataService mockReferenceDataService;

    @Mock
    private KafkaPublisherService mockPublisherService;

    @Mock
    private Logger mockLogger;

    @Before
    public void setUp() {
        MockitoAnnotations.initMocks(this);
        vertx = Vertx.vertx();

        verticle = new AddressModernizationProcessorVerticle();
        verticle.consumerService = mockConsumerService;
        verticle.addressModernizationHandler = mockHandler;
        verticle.transactionalReferenceDataService = mockReferenceDataService;
    }

    @Test
    public void testStart_successfulInitialization() {
        // Mock configuration
        JsonObject config = new JsonObject()
                .put("MER_AD_501_MODERNIZATION", new JsonObject()
                        .put("CONFIG_CDC_KAFKA_TOPIC", "test-topic-501"))
                .put("MER_AD", new JsonObject()
                        .put("CONFIG_CDC_KAFKA_TOPIC", "test-topic-ad"));

        // Stub the configuration extractor method
        when(mockConsumerService.createMessageSubscriber(any(), any(), anyLong(), any()))
                .thenReturn(Promise.promise().future());

        Promise<Void> startPromise = new PromiseImpl<>();
        verticle.start(startPromise);

        verify(mockConsumerService, times(2))
                .createMessageSubscriber(anyString(), anyString(), anyLong(), any());
        assertTrue(startPromise.future().succeeded());
    }

    @Test
    public void testStart_initializationFailure() {
        // Simulate a failure in initialization
        when(mockConsumerService.createMessageSubscriber(any(), any(), anyLong(), any()))
                .thenReturn(Promise.promise().future().fail("Initialization failure"));

        Promise<Void> startPromise = new PromiseImpl<>();
        verticle.start(startPromise);

        verify(mockConsumerService, times(2))
                .createMessageSubscriber(anyString(), anyString(), anyLong(), any());
        assertFalse(startPromise.future().succeeded());
    }

    // Add more tests for `processData` and `subscribingKafka` as needed
}
 @Test
    public void testProcessData_successfulProcessing() {
        JsonObject inputData = new JsonObject().put("key", "value");
        JsonObject expectedOutput = new JsonObject().put("processedKey", "processedValue");

        // Mock the handler to return expected output
        when(mockHandler.processData(inputData)).thenReturn(Future.succeededFuture(expectedOutput));

        // Call the method under test
        verticle.processData(inputData).onComplete(result -> {
            assertTrue(result.succeeded());
            assertEquals(expectedOutput, result.result());
        });

        // Verify the interaction with the mock handler
        verify(mockHandler, times(1)).processData(inputData);
    }

    @Test
    public void testProcessData_failure() {
        JsonObject inputData = new JsonObject().put("key", "value");

        // Simulate failure in data processing
        when(mockHandler.processData(inputData)).thenReturn(Future.failedFuture("Processing failed"));

        // Call the method under test
        verticle.processData(inputData).onComplete(result -> {
            assertTrue(result.failed());
            assertEquals("Processing failed", result.cause().getMessage());
        });

        // Verify the interaction with the mock handler
        verify(mockHandler, times(1)).processData(inputData);
    }
