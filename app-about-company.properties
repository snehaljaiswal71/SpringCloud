package com.axp.microdose.unified.merchant.read.demographics.data;

import com.aexp.gmdl.db.component.service.DbAction;
import com.axp.logging.schema.v0_1.Structured;
import com.axp.microdose.vertx.logging.LoggerFactory;
import io.vertx.core.Future;
import io.vertx.core.Promise;
import io.vertx.core.json.JsonArray;
import io.vertx.core.json.JsonObject;
import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;

import java.util.Collections;
import java.util.stream.IntStream;

import static com.axp.microdose.unified.merchant.read.demographics.util.DemographicsConstants.*;

public class DemographicsDetailDbAction extends DbAction {

  final Structured msgMarker;
  final String channelId;

  public DemographicsDetailDbAction(final Structured msgMarker, String channelId) {
    this.msgMarker = msgMarker;
    this.channelId = channelId;
  }

  private static final Logger log = LoggerFactory.getLogger(DemographicsDetailDbAction.class);

  @Override
  public Future<Void> setParams(String query, JsonObject request) {
    Promise<Void> p = Promise.promise();
    try {
      log.info(msgMarker, "REQUEST FROM {} CONSUMER AND THE REQUEST BODY IS {}", channelId, request);
      StringBuilder querySB = new StringBuilder(query);
      final JsonArray params = new JsonArray();
      int merchantIdentifierListSize;

      addRequiredParameter(request, MERCHANT_IDENTIFIER_LIST, params);
      JsonObject coreAttributes = request.getJsonObject(CORE_ATTRIBUTES, new JsonObject());
      JsonArray merchantIdentifierList = request.getJsonObject(CORE_ATTRIBUTES)
              .getJsonArray(MERCHANT_IDENTIFIER_LIST);

      if (null == merchantIdentifierList || merchantIdentifierList.isEmpty()) {
        throw new IllegalArgumentException("Required parameter merchantIdentifierList is missing or empty");
      }

      merchantIdentifierListSize = merchantIdentifierList.size();

      if (coreAttributes.containsKey(ACQUIRING_INSTITUTION_IDENTIFICATION_NUMBER)) {
        String ainNumber = coreAttributes.getString(ACQUIRING_INSTITUTION_IDENTIFICATION_NUMBER, "");
        if (!StringUtils.isEmpty(ainNumber)) {
          checkForOptionalParameter(querySB, " AND d.ain_no = ?", ainNumber, params);
        }
      }
      if (coreAttributes.containsKey(SOURCE_SYSTEM_IDENTIFIER)) {
        String sourceSystemId = coreAttributes.getString(SOURCE_SYSTEM_IDENTIFIER, "");
        if (!StringUtils.isEmpty(sourceSystemId)) {
          checkForOptionalParameter(querySB, " AND d.srce_sys_id = ?", sourceSystemId.trim(), params);
        }
      }
      if (coreAttributes.containsKey(BUSINESS_CENTER_CODE)) {
        String businessCenterCode = coreAttributes.getString(BUSINESS_CENTER_CODE, "");
        if (!StringUtils.isEmpty(businessCenterCode)) {
          checkForOptionalParameter(querySB, " AND d.bus_ctr_cd = ?", businessCenterCode.trim(), params);
        }
      }

      JsonObject demographicSearchObject = request.getJsonObject(DEMOGRAPHIC_ATTRIBUTES, new JsonObject());
      if (demographicSearchObject != null && !demographicSearchObject.isEmpty()) {
        String settlementTypeCode = demographicSearchObject.getString(SET_TYPE_CODE, "");
        String setIdentifier = demographicSearchObject.getString("", "");
        String payee1 = demographicSearchObject.getString(SET_TYPE_CODE, "");
        if (!StringUtils.isEmpty(setIdentifier)) {
          checkForOptionalParameter(querySB, " AND d.settle_set_id = ?", setIdentifier.trim(), params);
        }

        if (!StringUtils.isEmpty(settlementTypeCode)) {
          checkForOptionalParameter(querySB, " AND d.settle_set_type_cd = ?", settlementTypeCode.trim(), params);
        }

        if (!StringUtils.isEmpty(payee1)) {
          checkForOptionalParameter(querySB, " AND d.payee_1_mer_id = ?", payee1.trim(), params);
        }

      }

      String seNumbers = String.join(",", Collections.nCopies(merchantIdentifierListSize, "?"));

      this.query = querySB.toString()
              .replace("seNumbers", seNumbers);
      this.params = params;
      log.info(msgMarker, "Read Demographics SOR SQL query is: {}", this.query);
      p.complete();
    } catch (Exception e) {
      p.fail("Params not configured correctly");
      log.error(msgMarker, "Params not configured correctly , cause {}", e.getLocalizedMessage(), e);
    }
    return p.future();
  }

  void addRequiredParameter(final JsonObject request, final String parameter, final JsonArray params) {
    if (request.containsKey("MSP_SETS")) {
      JsonArray seNumbers = request.getJsonObject(CORE_ATTRIBUTES).getJsonArray(parameter);
      if (seNumbers != null && !seNumbers.isEmpty()) {
        IntStream.range(0, seNumbers.size()).mapToObj(seNumbers::getString).forEach(string -> {
          params.add(string);
          params.add(string);
          params.add(string);
          params.add(string);
        });
      }
    } else {
      JsonArray seNumbers = request.getJsonObject(CORE_ATTRIBUTES).getJsonArray(parameter);
      if (seNumbers != null && !seNumbers.isEmpty()) {
        IntStream.range(0, seNumbers.size()).mapToObj(seNumbers::getString).forEach(params::add);
      }
    }
  }

  void checkForOptionalParameter(StringBuilder querySB, final String clause, String value, final JsonArray params) {
    querySB.append(clause);
    params.add(value);
  }
}
