import com.aexp.gmdl.data.processor.service.ValidatorService;
import com.aexp.gmdl.data.validator.verticle.ValidatorDirectInstance;
import io.vertx.core.Future;
import io.vertx.core.Promise;
import io.vertx.core.json.JsonObject;
import org.apache.commons.lang3.exception.ExceptionUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
public class ValidatorServiceImpl implements ValidatorService {
  private static final Logger LOGGER = LoggerFactory.getLogger(ValidatorServiceImpl.class);
  static ValidatorDirectInstance validatorDirectInstance = null;
  public ValidatorServiceImpl() {}
  public ValidatorServiceImpl(ValidatorDirectInstance validatorDirectInstance) {
    ValidatorServiceImpl.validatorDirectInstance = validatorDirectInstance;
  }
  @Override
  public Future<JsonObject> callToValidatorJar(
      JsonObject input, String batchCorrelationId, String address) {
    Promise<JsonObject> mainPromise = Promise.promise();
    try {
      if (validatorDirectInstance != null) {
        validatorDirectInstance
            .processData(input, null)
            .onComplete(
                reply -> {
                  if (reply.succeeded()) {
                    mainPromise.complete(reply.result());
                  } else {
                    mainPromise.fail(reply.cause());
                  }
                });
      } else {
        LOGGER.error(
            "BatchCorrelationId: {}, validatorDirectInstance in ValidatorServiceImpl is null address: {}",
            batchCorrelationId,
            address);
        mainPromise.fail("validatorDirectInstance in ValidatorServiceImpl is null");
      }
    } catch (Exception e) {
      LOGGER.error(
          "BatchCorrelationId: {}, Exception in ValidatorServiceImpl while called validator JAR."
              + " address: {}, Error: {}, Trace: {}",
          batchCorrelationId,
          address,
          e.getLocalizedMessage(),
          ExceptionUtils.getStackTrace(e));
      mainPromise.fail(e.getLocalizedMessage());
    }
    return mainPromise.future();
  }
}
