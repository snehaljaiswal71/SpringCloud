public class InitializeDBComponentImpl implements InitializeDBComponent {
  public static final Logger LOGGER = LoggerFactory.getLogger(InitializeDBComponentImpl.class);

  private Vertx vertx;
  private JsonObject config;

  public InitializeDBComponentImpl() {}

  public Future<DBComponentDirectInstance> initializeDBComponent(
      Vertx vertx, JsonObject config, Marker classMarker) {
    this.vertx = vertx;

    try {

      JsonObject localConfig = new JsonObject();
      config.forEach(
          (res) -> {
            if (res.getKey().equals("lambda-config.json")) {
              config
                  .getJsonObject("lambda-config.json")
                  .forEach(
                      (val) -> {
                        localConfig.put(val.getKey(), val.getValue());
                      });
            } else {
              localConfig.put(res.getKey(), res.getValue());
            }
          });

      JsonObject commonConfig = localConfig.getJsonObject("common", new JsonObject());
      Boolean approach = commonConfig.getBoolean("db.jar.verticle.approach.active", false);

      this.config = localConfig;
      if (approach.equals(Boolean.TRUE)) return initializeAsVerticle(classMarker);
      else return initializeAsDirectInstance(classMarker);
    } catch (Exception e) {
      LOGGER.error(
          classMarker,
          "Please provide correct config structure, Error: {}, Trace: {}",
          e.getLocalizedMessage(),
          ExceptionUtils.getStackTrace(e));
      return Future.failedFuture(e.getLocalizedMessage());
    }
  }

  private Future<DBComponentDirectInstance> initializeAsVerticle(Marker classMarker) {
    Promise<DBComponentDirectInstance> promise = Promise.promise();

    config.put("classMarker", classMarker);
    DeploymentOptions options = new DeploymentOptions().setConfig(config);

    vertx.deployVerticle(
        new DBComponentVerticle(),
        options,
        res -> {
          if (res.succeeded()) {
            promise.complete(new DBComponentDirectInstance());
          } else {
            LOGGER.error(
                classMarker,
                "Failed to deploy DB Verticle. Reason: {}, Trace: {}",
                res.cause() != null ? res.cause().getLocalizedMessage() : "Cause is null",
                res.cause());
            promise.fail(res.cause());
          }
        });

    return promise.future();
  }

  private Future<DBComponentDirectInstance> initializeAsDirectInstance(Marker classMarker) {
    DBComponentDirectInstance dbComponentDirectInstance = new DBComponentDirectInstance();
    Promise<DBComponentDirectInstance> promise = Promise.promise();

    dbComponentDirectInstance
        .init(vertx, config, classMarker)
        .onComplete(
            res -> {
              if (res.succeeded()) {
                promise.complete(dbComponentDirectInstance);
              } else {
                LOGGER.error(
                    classMarker,
                    "Failed to deploy DB Component. Reason: {}, Trace: {}",
                    res.cause() != null ? res.cause().getLocalizedMessage() : "Cause is null",
                    res.cause());
                promise.fail(res.cause());
              }
            });

    return promise.future();
  }
}
