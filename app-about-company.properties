import com.aexp.gmdl.db.component.service.TransactionalReferenceDataService;
import com.aexp.gmdl.db.component.util.MessageMarker;
import io.vertx.core.AbstractVerticle;
import io.vertx.core.CompositeFuture;
import io.vertx.core.Future;
import io.vertx.core.Promise;
import io.vertx.core.json.JsonObject;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.slf4j.Marker;
public class DBComponentVerticle extends AbstractVerticle {
  private static final String DEFAULT_EPAAS_ENV;
  private static final String EPAAS_ENV;
  private static String env;
  static {
    DEFAULT_EPAAS_ENV = "e0";
    EPAAS_ENV = "EPAAS_ENV";
    env = System.getenv(EPAAS_ENV);
    env = Objects.requireNonNullElse(env, DEFAULT_EPAAS_ENV);
  }
  private static final Logger LOGGER = LoggerFactory.getLogger(DBComponentVerticle.class);
  @Override
  public void start(Promise<Void> startPromise) {
    try {
      List<Future> listCache = new ArrayList<>();
      JsonObject classMarkerJson = config().getJsonObject("classMarker");
      Marker classMarker =
          classMarkerJson != null ? MessageMarker.getMessageMarker(classMarkerJson.getMap()) : null;
      TransactionalReferenceDataService transactionalReferenceDataService =
          TransactionalReferenceDataService.create(this.vertx, config(), classMarker);
      listCache.add(
          new LoadCacheMapDataVerticle()
              .init(vertx, config(), transactionalReferenceDataService, classMarker));
      listCache.add(
          new DBHealthCheckVerticle()
              .init(vertx, config(), transactionalReferenceDataService, classMarker));
      CompositeFuture.all(listCache)
          .onSuccess(
              res -> {
                startPromise.complete();
              })
          .onFailure(
              error -> {
                LOGGER.error(
                    classMarker,
                    "ERROR in db component deployment: Reason: {}, Trace: {}",
                    error.getLocalizedMessage(),
                    error);
                startPromise.fail(error);
              });
    } catch (Exception e) {
      startPromise.fail(e.getLocalizedMessage());
    }
  }
  @Override
  public void stop(Promise<Void> stopPromise) {
    Marker classMarker = (Marker) config().getValue("classMarker"); // What if this is null?
    LOGGER.info(classMarker, "DBComponentMainVerticle  undeployed.");
    stopPromise.complete();
  }
}
