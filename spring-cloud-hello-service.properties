import io.vertx.core.DeploymentOptions;
import io.vertx.core.Future;
import io.vertx.core.Promise;
import io.vertx.core.Vertx;
import io.vertx.core.json.JsonObject;
import org.apache.commons.lang3.exception.ExceptionUtils;
import org.junit.Before;
import org.junit.Test;
import org.mockito.Mockito;
import org.slf4j.Logger;
import org.slf4j.Marker;

import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

public class InitializeDBComponentImplTest {

    private InitializeDBComponentImpl initializeDBComponent;
    private Vertx vertxMock;
    private JsonObject configMock;
    private Marker markerMock;

    @Before
    public void setup() {
        vertxMock = mock(Vertx.class);
        configMock = mock(JsonObject.class);
        markerMock = mock(Marker.class);
        initializeDBComponent = new InitializeDBComponentImpl();
    }

    @Test
    public void testInitializeDBComponentAsVerticle() {
        JsonObject config = new JsonObject();
        JsonObject commonConfig = new JsonObject().put("db.jar.verticle.approach.active", true);
        config.put("common", commonConfig);

        when(configMock.getJsonObject("common", new JsonObject())).thenReturn(commonConfig);

        DeploymentOptions deploymentOptionsMock = mock(DeploymentOptions.class);
        when(deploymentOptionsMock.setConfig(any())).thenReturn(deploymentOptionsMock);

        doAnswer(invocation -> {
            Promise<DBComponentDirectInstance> promise = invocation.getArgument(2);
            promise.complete(new DBComponentDirectInstance());
            return null;
        }).when(vertxMock).deployVerticle(any(DBComponentVerticle.class), any(DeploymentOptions.class), any());

        Future<DBComponentDirectInstance> result = initializeDBComponent.initializeDBComponent(vertxMock, config, markerMock);

        assertNotNull(result);
        assertTrue(result.succeeded());
        assertNotNull(result.result());
    }

    @Test
    public void testInitializeDBComponentAsDirectInstance() {
        JsonObject config = new JsonObject();
        JsonObject commonConfig = new JsonObject().put("db.jar.verticle.approach.active", false);
        config.put("common", commonConfig);

        when(configMock.getJsonObject("common", new JsonObject())).thenReturn(commonConfig);

        DBComponentDirectInstance dbComponentDirectInstanceMock = mock(DBComponentDirectInstance.class);
        when(dbComponentDirectInstanceMock.init(any(), any(), any())).thenReturn(Future.succeededFuture());

        Future<DBComponentDirectInstance> result = initializeDBComponent.initializeDBComponent(vertxMock, config, markerMock);

        assertNotNull(result);
        assertTrue(result.succeeded());
        assertNotNull(result.result());
    }

    @Test
    public void testInitializeDBComponentWithInvalidConfig() {
        JsonObject invalidConfig = null;

        Future<DBComponentDirectInstance> result = initializeDBComponent.initializeDBComponent(vertxMock, invalidConfig, markerMock);

        assertNotNull(result);
        assertTrue(result.failed());
        assertEquals("Please provide correct config structure, Error: null", result.cause().getMessage());
    }
}
