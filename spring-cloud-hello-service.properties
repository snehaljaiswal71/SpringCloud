Promise<JsonObject> promise = Promise.promise();
JsonObject mockResponse = new JsonObject()
    .put("status", "SUCCESS")
    .put("rows", new JsonArray().add(new JsonObject().put("key", "value")));
promise.complete(mockResponse);

when(validatorService.callToValidatorJar(any(JsonObject.class), anyString(), anyString()))
    .thenReturn(promise.future());


@Test
public void testFieldEncryptionDecryptionSuccess() {
    JsonArray inputContent = new JsonArray().add(new JsonObject().put("row_corr_id", "123"));
    String batchCorrelationId = "batch-123";
    String address = "address-1";
    String ruleName = "rule";

    Promise<JsonObject> promise = Promise.promise();
    JsonObject mockResponse = new JsonObject()
        .put("status", "SUCCESS")
        .put("rows", new JsonArray().add(new JsonObject().put("key", "value")));
    promise.complete(mockResponse);

    when(validatorService.callToValidatorJar(any(JsonObject.class), anyString(), anyString()))
        .thenReturn(promise.future());

    Future<JsonArray> result = yourClass.fieldEncryptionDecryption(inputContent, batchCorrelationId, address, ruleName);

    result.onComplete(ar -> {
        assertTrue(ar.succeeded());
        assertNotNull(ar.result());
        assertEquals(1, ar.result().size());
        verify(validatorService, times(1))
            .callToValidatorJar(any(JsonObject.class), eq(batchCorrelationId), eq(address));
    });
}
