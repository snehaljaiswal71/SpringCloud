import io.vertx.core.CompositeFuture;
import io.vertx.core.Future;
import io.vertx.core.Promise;
import io.vertx.core.Vertx;
import io.vertx.core.json.JsonObject;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.ArgumentCaptor;
import org.mockito.Captor;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.runners.MockitoJUnitRunner;
import org.slf4j.Marker;

import java.util.List;

import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

@RunWith(MockitoJUnitRunner.class)
public class DBComponentVerticleTest {

    @Mock
    private Vertx vertx;

    @Mock
    private JsonObject config;

    @Mock
    private Marker classMarker;

    @Mock
    private CompositeFuture compositeFuture;

    @Captor
    private ArgumentCaptor<List<Future>> futureListCaptor;

    private DBComponentVerticle verticle;

    @Before
    public void setUp() {
        MockitoAnnotations.initMocks(this);
        verticle = spy(new DBComponentVerticle());

        // Mock configuration to return a JSON object for classMarker
        when(config.getJsonObject("classMarker")).thenReturn(new JsonObject());
        doReturn(config).when(verticle).config();
    }

    @Test
    public void testStart_Success() {
        // Arrange
        Promise<Void> startPromise = Promise.promise();

        LoadCacheMapDataVerticle loadCacheMapDataVerticle = mock(LoadCacheMapDataVerticle.class);
        DBHealthCheckVerticle dbHealthCheckVerticle = mock(DBHealthCheckVerticle.class);

        Future future1 = mock(Future.class);
        Future future2 = mock(Future.class);

        when(future1.succeeded()).thenReturn(true);
        when(future2.succeeded()).thenReturn(true);

        when(loadCacheMapDataVerticle.init(eq(vertx), eq(config), any(), eq(classMarker)))
                .thenReturn(future1);
        when(dbHealthCheckVerticle.init(eq(vertx), eq(config), any(), eq(classMarker)))
                .thenReturn(future2);

        doReturn(loadCacheMapDataVerticle).when(verticle).loadCacheMapDataVerticle();
        doReturn(dbHealthCheckVerticle).when(verticle).dbHealthCheckVerticle();

        when(CompositeFuture.all(anyList())).thenReturn(compositeFuture);

        // Mock CompositeFuture behaviour for success
        when(compositeFuture.succeeded()).thenReturn(true);

        // Act
        verticle.start(startPromise);

        // Assert
        assertTrue(startPromise.future().succeeded());
        verify(CompositeFuture.all(futureListCaptor.capture()));
        assertEquals(2, futureListCaptor.getValue().size());
    }

    @Test
    public void testStart_Failure() {
        // Arrange
        Promise<Void> startPromise = Promise.promise();

        LoadCacheMapDataVerticle loadCacheMapDataVerticle = mock(LoadCacheMapDataVerticle.class);
        DBHealthCheckVerticle dbHealthCheckVerticle = mock(DBHealthCheckVerticle.class);

        Future future1 = mock(Future.class);
        Future future2 = mock(Future.class);

        when(future1.succeeded()).thenReturn(false);
        when(future1.cause()).thenReturn(new RuntimeException("Future 1 failed"));

        when(loadCacheMapDataVerticle.init(eq(vertx), eq(config), any(), eq(classMarker)))
                .thenReturn(future1);
        when(dbHealthCheckVerticle.init(eq(vertx), eq(config), any(), eq(classMarker)))
                .thenReturn(future2);

        doReturn(loadCacheMapDataVerticle).when(verticle).loadCacheMapDataVerticle();
        doReturn(dbHealthCheckVerticle).when(verticle).dbHealthCheckVerticle();

        when(CompositeFuture.all(anyList())).thenReturn(compositeFuture);

        // Mock CompositeFuture behaviour for failure
        when(compositeFuture.succeeded()).thenReturn(false);
        when(compositeFuture.cause()).thenReturn(new RuntimeException("Composite Future failed"));

        // Act
        verticle.start(startPromise);

        // Assert
        assertTrue(startPromise.future().failed());
        verify(CompositeFuture.all(futureListCaptor.capture()));
        assertEquals(2, futureListCaptor.getValue().size());
    }

    @Test
    public void testStop_Success() {
        // Arrange
        Promise<Void> stopPromise = Promise.promise();
        when(config.getValue("classMarker")).thenReturn(classMarker);

        // Act
        verticle.stop(stopPromise);

        // Assert
        assertTrue(stopPromise.future().succeeded());
    }

    @Test
    public void testStop_NullMarker() {
        // Arrange
        Promise<Void> stopPromise = Promise.promise();
        when(config.getValue("classMarker")).thenReturn(null);

        // Act
        verticle.stop(stopPromise);

        // Assert
        assertTrue(stopPromise.future().succeeded());
    }
}
