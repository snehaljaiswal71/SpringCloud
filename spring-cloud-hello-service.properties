package com.axp.microdose.unified.merchant.read.demographics.sor;

import com.aexp.gmdl.db.component.service.TransactionalReferenceDataService;
import com.axp.microdose.unified.merchant.read.demographics.util.DemographicsConstants;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.vertx.core.*;
import io.vertx.core.eventbus.DeliveryOptions;
import io.vertx.core.eventbus.EventBus;
import io.vertx.core.eventbus.MessageConsumer;
import io.vertx.core.eventbus.Message;
import io.vertx.core.json.JsonArray;
import io.vertx.core.json.JsonObject;
import io.vertx.ext.unit.Async;
import io.vertx.ext.unit.TestContext;
import io.vertx.ext.unit.junit.VertxUnitRunner;
import org.apache.http.HttpStatus;
import org.junit.*;
import org.junit.runner.RunWith;
import org.mockito.Mockito;

import java.util.Optional;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

@RunWith(VertxUnitRunner.class)
public class ReadUnifiedMerchantDemographicsVerticleTest {

    private Vertx vertx;
    private ReadUnifiedMerchantDemographicsVerticle verticle;

    @Before
    public void setUp(TestContext context) {
        vertx = Vertx.vertx();
        verticle = Mockito.spy(new ReadUnifiedMerchantDemographicsVerticle());

        JsonObject config = new JsonObject()
                .put("postgres-config", new JsonObject()
                    .put("gcharcore", new JsonObject()
                        .put("primary", new JsonObject()
                            .put("user", "test-user"))));

        DeploymentOptions options = new DeploymentOptions().setConfig(config);

        vertx.deployVerticle(verticle, options, context.asyncAssertSuccess());
    }

    @After
    public void tearDown(TestContext context) {
        vertx.close(context.asyncAssertSuccess());
    }

    @Test
    public void testHandle_withValidRequest_returnsSuccess(TestContext context) {
        Async async = context.async();

        JsonObject request = new JsonObject()
                .put("coreAttributes", new JsonObject()
                        .put("merchantIdentifierList", new JsonArray().add("MID123")));

        DeliveryOptions options = new DeliveryOptions()
                .addHeader(DemographicsConstants.CHANNEL, "GNS")
                .addHeader("ONE_DATA_CORRELATION_ID", "test-corr-id");

        // Listen for the response
        EventBus eventBus = vertx.eventBus();
        eventBus.consumer("ReadUnifiedMerchantDemographics.sor.v1.reply", reply -> {
            JsonArray response = (JsonArray) reply.body();
            context.assertNotNull(response);
            async.complete();
        });

        // Send message to verticle
        vertx.setTimer(1000, id -> {
            eventBus.request("ReadUnifiedMerchantDemographics.sor.v1", request, options, ar -> {
                if (ar.succeeded()) {
                    // Manually forward to reply address
                    eventBus.publish("ReadUnifiedMerchantDemographics.sor.v1.reply", ar.result().body());
                } else {
                    context.fail(ar.cause());
                }
            });
        });
    }
}
