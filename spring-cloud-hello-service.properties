@Test
    public void testExecuteQuery_Success() {
        // Arrange
        String testSql = "SELECT * FROM test_table";
        JsonObject mockRowData = new JsonObject().put("id", 1).put("name", "test");

        when(postgresService.getPostgresConn(anyString()))
            .thenReturn(Future.succeededFuture(mockConnection));
        when(mockConnection.preparedQuery(testSql)).thenReturn(mockPreparedQuery);
        when(mockPreparedQuery.execute()).thenReturn(Future.succeededFuture(mockRowSet));
        when(mockRowSet.size()).thenReturn(1);
        when(mockRowSet.iterator()).thenReturn(mockRowIterator);
        when(mockRowIterator.hasNext()).thenReturn(true, false);
        when(mockRowIterator.next()).thenReturn(mockRow);
        when(mockRow.toJson()).thenReturn(mockRowData);

        // Act
        Future<JsonObject> result = postgresService.executeQuery(testSql);

        // Assert
        result.onComplete(
            ar -> {
                assertTrue(ar.succeeded());
                assertNotNull(ar.result());
                assertEquals(mockRowData, ar.result());
                verify(mockConnection, times(1)).close(); // Verify connection is closed
            });
    }
