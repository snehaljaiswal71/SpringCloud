buildscript {
  repositories {
    maven {
      url 'https://artifactory.aexp.com/prod'
    }
    maven {
      url 'https://artifactory.aexp.com/libs-snapshot'
    }
  }
  dependencies {
	classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:5.0.0.4638"
    classpath "com.axp.microdose:gradle.plugin:${gradle.microdoseAssureVersion}"
  }
}

apply plugin: 'com.axp.microdose.gradle.plugin.assure'
apply plugin: 'org.sonarqube'
apply plugin: 'jacoco'

group = 'com.axp.microdose'

dependencies {
  implementation "com.axp.microdose:microdose-cache:${gradle.microdoseCacheVersion}"
  implementation "com.axp.microdose:microdose-commons:${gradle.microdoseCommonsVersion}"
  implementation "com.axp.microdose:microdose-data:${gradle.microdoseDataVersion}"
  implementation "io.vertx:vertx-jdbc-client:${gradle.vertxVersion}"
  implementation "io.vertx:vertx-core:${gradle.vertxVersion}"
  implementation "io.vertx:vertx-config:${gradle.vertxVersion}"
  implementation "org.apache.httpcomponents:httpclient:${gradle.apacheHttpClientVersion}"
  implementation "org.apache.logging.log4j:log4j-core:${gradle.log4j}"
  implementation "io.vertx:vertx-service-proxy:${gradle.vertxVersion}"
  implementation "com.aexp.sec.crypto:hiped:${gradle.decryptConfig}"
  implementation ("com.aexp.gmdl.dbcomponent:globalrawdata-db-component:${gradle.dbComponent}:vertx3x"){
    exclude group: 'io.vertx:vertx-core:4.0.3'
    exclude group: 'io.vertx:vertx-web:4.0.3'
  }
  configurations {
    testRuntimeOnly.exclude group: "org.apache.logging.log4j", module: "log4j-slf4j-impl"
  }

  testImplementation "com.axp.microdose:microdose-test:${gradle.microdoseTestVersion}"
  testImplementation "io.vertx:vertx-unit:${gradle.vertxVersion}"
  testImplementation "junit:junit:${gradle.junitVersion}"
  testImplementation "org.assertj:assertj-core:${gradle.assertjVersion}"
  testImplementation "org.mockito:mockito-core:${gradle.mockitoVersion}"
  testImplementation "org.powermock:powermock-api-mockito2:${gradle.powerMockitoVersion}"
  testImplementation "org.powermock:powermock-module-junit4:${gradle.powerMockModuleJunit4Version}"
}

afterEvaluate {
  task fatJar(type: Jar) {
    archiveClassifier.set('fat')
    from sourceSets.main.output
    duplicatesStrategy(DuplicatesStrategy.INCLUDE)
    from {
      configurations.runtimeClasspath.files.
              findAll { it.name.startsWith("vertx-core") }.
              collect { zipTree(it) }
    }
    from {
      configurations.runtimeClasspath.files.
              findAll { it.name.startsWith("vertx-config") }.
              collect { zipTree(it) }
    }
    from {
      configurations.runtimeClasspath.files.
              findAll { it.name.startsWith("vertx-service-proxy") }.
              collect { zipTree(it) }
    }
    from {
      configurations.runtimeClasspath.files.
              findAll { it.name.startsWith("vertx-sql-common") }.
              collect { zipTree(it) }
    }
    from {
      configurations.runtimeClasspath.files.
              findAll { it.name.startsWith("vertx-jdbc-client") }.
              collect { zipTree(it) }
    }
    from {
      configurations.runtimeClasspath.files.
              findAll { it.name.startsWith("globalrawdata-db-component") }.
              collect { zipTree(it) }
    }
  }
  artifacts {
    archives fatJar
  }
  build.dependsOn(fatJar)
}


jacocoTestReport {
	reports {
		html.outputLocation = layout.buildDirectory.dir('jacoco')
	}
}.dependsOn('jacocoWarning')

sonar {
	properties {
		property 'sonar.host.url', 'https://sonar.aexp.com/'
		property 'sonar.projectName', 'one-data-unified-merchant-read-demographics-sor'
		property 'sonar.projectKey', 'amex-eng.one-data-unified-merchant-read-demographics-sor.git'
		property 'sonar.sources', 'src/main'
		property 'sonar.tests', 'src/test'
	}
}
