public class RTFPublisherService {
  private static final Logger logger = LoggerFactory.getLogger(RTFPublisherService.class);
  public Future<JsonObject> publishToRTF(
      JsonObject requestBody, JsonObject header, JsonObject config, Vertx vertx) {
    Promise<JsonObject> rtfResponsePromise = Promise.promise();
    Properties property = new Properties();
    property.put(RtfClientConfig.RTF_CLIENT_ENV, config.getJsonObject(RTF_CONFIG).getString(ENV));
    property.put(RtfClientConfig.RTF_CLIENT_OPTION, RtfClientConfig.RTF_CLIENT_OPTION_2);
    property.put(
        "DEFAULT_HTTP_CLIENT_IMPL_CLASS",
        config.getJsonObject(RTF_CONFIG).getString(PROVIDER_CLASS));
    RtfClient rtfClient;
    try {
      rtfClient = RTFClientFactory.getRtfClient(property);
      Map<String, String> headers = new HashMap<>();
      headers.put("Content-Type", "application/json");
      headers.put("Accept", "application/json");
      RtfRequest req =
          RtfRequest.newInstance()
              .setAxCorrelationId(UUID.randomUUID())
              .setBody(requestBody.toString().getBytes())
              .setEventType(config.getJsonObject(RTF_CONFIG).getString(EVENT_NAME))
              .setHeaders(headers)
              .setTimeStamp(System.currentTimeMillis());
      RtfResponse response = rtfClient.execute(req, 1);
      if (response.getHttpStatusCode() == 200) {
        logger.debug("RTF publish successful with data- " + requestBody.toString());
        JsonObject responseJson =
            new JsonObject()
                .put("httpStatusCode", response.getHttpStatusCode())
                .put("responseSource", response.getResponseSource())
                .put("dataCennter", response.getDataCenter());
        rtfResponsePromise.complete(responseJson);
      } else if (response.getThrowable() != null) {
        logger.debug(
            "RTF publish failed with error- " + response.getThrowable().getLocalizedMessage());
        rtfResponsePromise.fail(response.getThrowable().getLocalizedMessage());
      }
    } catch (Exception e) {
      logger.error("error in publishing to RTF" + e.getLocalizedMessage());
    }
    return rtfResponsePromise.future();
  }
}
