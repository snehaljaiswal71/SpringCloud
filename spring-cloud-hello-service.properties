 @Test
    public void testExecutePreparedQuery_Success() {
        // Arrange
        String sql = "SELECT * FROM table WHERE id = ?";
        JsonArray param = new JsonArray().add(1);
        String dbName = "testDb";
        Integer queryTimeout = 10;
        String correlationId = "testCorrelationId";

        Promise<JsonObject> promise = Promise.promise();

        // Mock dbUtil.getConnection behavior
        doAnswer(invocation -> {
            Handler<AsyncResult<SQLConnection>> handler = invocation.getArgument(2);
            handler.handle(Future.succeededFuture(sqlConnectionMock));
            return null;
        }).when(dbUtilMock).getConnection(eq(dbName), eq(correlationId), eq(markerMock), any());

        // Mock queryWithParams behavior
        doAnswer(invocation -> {
            JsonArray params = invocation.getArgument(1);
            Handler<AsyncResult<JsonObject>> handler = invocation.getArgument(2);
            JsonObject result = new JsonObject().put("key", "value");
            handler.handle(Future.succeededFuture(new JsonObject().put("rows", new JsonArray().add(result))));
            return null;
        }).when(sqlConnectionMock).queryWithParams(eq(sql), any(), any());

        // Act
        dbComponent.executePreparedQuery(sql, param, dbName, queryTimeout, correlationId, markerMock, promise.future()::onComplete);

        // Assert
        promise.future().onComplete(ar -> {
            assertTrue(ar.succeeded());
            assertNotNull(ar.result());
            assertEquals("value", ar.result().getString("key"));
        });

        verify(sqlConnectionMock, times(1)).setOptions(any(SQLOptions.class));
        verify(sqlConnectionMock, times(1)).close();
    }
