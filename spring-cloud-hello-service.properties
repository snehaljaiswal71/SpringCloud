private Future<String> decryptField(final String key, final String bankFormat,
                                      final String tweak, final Structured msgMarker) {
    Promise<String> promise = Promise.promise();
    try {
      encrConfig = new JsonObject()
              .put("KEY_IDENTIFIER", decryptConfig.getString("KEY_IDENTIFIER"))
              .put("PROVIDER", decryptConfig.getString("PROVIDER"))
              .put("KMS_CBIS_ENDPOINT", decryptConfig.getString("KMS_CBIS_ENDPOINT"))
              .put("KMS_CBIS_TOKEN_ENDPOINT", decryptConfig.getString("KMS_CBIS_TOKEN_ENDPOINT"))
              .put("KMS_CBIS_CLIENT_ID", decryptConfig.getString("KMS_CBIS_CLIENT_ID"))
              .put("KMS_CBIS_CLIENT_SECRET", decryptConfig.getString("KMS_CBIS_CLIENT_SECRET"))
              .put("KMS_APP_CAR_ID", decryptConfig.getString("KMS_APP_CAR_ID"));
      Properties properties = new Properties();
      encrConfig.forEach((data) -> {
        properties.put(data.getKey(), data.getValue());
      });
      KeyHandleFPE kh = new KeyHandleFPE(encrConfig.getString("KEY_IDENTIFIER"));
      CryptoFPE cryptoFpeUtil = new CryptoFPE(properties, "MODUS-" + null);
      final String value = cryptoFpeUtil.decrypt(key, kh, bankFormat, tweak);
      if (value == null) {
        log.info(msgMarker, "VALUE IS NOT DECRYPTED. SO RETRY BY ADDING PATH");
        encrConfig = new JsonObject()
                .put("KEY_IDENTIFIER", decryptConfig.getString("KEY_IDENTIFIER"))
                .put("PROVIDER", decryptConfig.getString("PROVIDER"))
                .put("KMS_CBIS_ENDPOINT", decryptConfig.getString("KMS_CBIS_ENDPOINT"))
                .put("KMS_CBIS_TOKEN_ENDPOINT", decryptConfig.getString("KMS_CBIS_TOKEN_ENDPOINT"))
                .put("KMS_CBIS_CLIENT_ID", decryptConfig.getString("KMS_CBIS_CLIENT_ID"))
                .put("KMS_CBIS_CLIENT_SECRET", decryptConfig.getString("KMS_CBIS_CLIENT_SECRET"))
                .put("SO_FILE_PATH", "/main/resources/libcrypto")
                .put("KMS_APP_CAR_ID", decryptConfig.getString("KMS_APP_CAR_ID"));
        Properties properties1 = new Properties();
        encrConfig.forEach((data) -> {
          properties1.put(data.getKey(), data.getValue());
        });
        KeyHandleFPE keyhand = new KeyHandleFPE(encrConfig.getString("KEY_IDENTIFIER"));
        CryptoFPE cryptoFpeUtils = new CryptoFPE(properties1, "MODUS-" + null);
        final String values = cryptoFpeUtils.decrypt(key, keyhand, bankFormat, tweak);
        promise.complete(values);
      } else {
        promise.complete(value);
      }
    } catch (HiPEDException ex) {
      log.info(msgMarker, "Exception during decrypting the value. Details : " + ex.getLocalizedMessage());
      promise.fail("FAILED TO DECRYPT");
    }
    return promise.future();
  }

public CryptoFPE(Properties properties, String name) {
		String methodName = "properties";
		try {
			config = new CryptoServiceNGConfig.Builder(properties,name).build();
			this.configName = config.getName();
			validateFPEConfig();
			//Initializing HipedKeyManager in the constructor as HipedKeyManager is same for every instance of CryptoFPE
			km = new HipedKeyManager(config, false);
		} catch (Exception ex) {
			CryptoServiceUtil.handleHipedException(ex,GlobalConstants.ERR_UNEXPECTED,GlobalConstants.UNEXPECTED_EXCEPTION + methodName, configName);
		}
	}
