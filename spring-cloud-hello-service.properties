import io.vertx.core.*;
import io.vertx.core.json.JsonObject;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.*;

import static org.mockito.Mockito.*;
import static org.junit.Assert.*;

@RunWith(MockitoJUnitRunner.class)
public class DBComponentVerticleTest {

    @Mock
    private TransactionalReferenceDataService transactionalReferenceDataService;

    @Mock
    private LoadCacheMapDataVerticle loadCacheMapDataVerticle;

    @Mock
    private DBHealthCheckVerticle dbHealthCheckVerticle;

    @Mock
    private Marker mockMarker;

    private Vertx vertx;
    private DBComponentVerticle dbComponentVerticle;
    private JsonObject config;

    @Before
    public void setUp() {
        MockitoAnnotations.initMocks(this);
        vertx = Vertx.vertx(); // Manually initialize Vert.x instance
        config = new JsonObject().put("classMarker", new JsonObject()); // Add a dummy marker
        dbComponentVerticle = new DBComponentVerticle();

        // Mock the constructor dependencies
        when(TransactionalReferenceDataService.create(eq(vertx), eq(config), any(Marker.class)))
                .thenReturn(transactionalReferenceDataService);
        when(loadCacheMapDataVerticle.init(eq(vertx), eq(config), eq(transactionalReferenceDataService), any(Marker.class)))
                .thenReturn(Future.succeededFuture());
        when(dbHealthCheckVerticle.init(eq(vertx), eq(config), eq(transactionalReferenceDataService), any(Marker.class)))
                .thenReturn(Future.succeededFuture());
    }

    @Test
    public void testStartVerticleSuccess() throws InterruptedException {
        // Deploy the verticle
        vertx.deployVerticle(dbComponentVerticle, res -> {
            if (res.succeeded()) {
                System.out.println("Deployment succeeded");
                // Assert success
                // You can use assertions or use a custom method to verify the successful start
            } else {
                res.cause().printStackTrace();
                fail("Deployment failed: " + res.cause().getMessage());
            }
        });

        // Allow the deployment to finish before ending the test
        Thread.sleep(2000); // You can replace this with a better async approach if necessary
    }

    @Test
    public void testStartVerticleFailure() {
        // Simulate an error in the start method.
        when(loadCacheMapDataVerticle.init(any(), any(), any(), any()))
            .thenReturn(Future.failedFuture(new RuntimeException("Deployment failed")));

        vertx.deployVerticle(dbComponentVerticle, res -> {
            if (res.failed()) {
                System.out.println("Deployment failed as expected");
                // Test that the failure is handled
            } else {
                fail("Deployment should have failed");
            }
        });
    }

    @Test
    public void testStopVerticle() {
        // Simulate stopping the verticle
        dbComponentVerticle.stop(Promise.promise());

        dbComponentVerticle.stop(Promise.promise())
            .onComplete(result -> {
                if (result.succeeded()) {
                    System.out.println("Verticle stopped successfully");
                } else {
                    result.cause().printStackTrace();
                    fail("Expected stop to succeed");
                }
            });
    }
}
