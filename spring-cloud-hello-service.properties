import io.vertx.core.*;
import io.vertx.core.json.JsonObject;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.*;

import static org.mockito.Mockito.*;
import static org.junit.Assert.*;

@RunWith(MockitoJUnitRunner.class)
public class DBComponentVerticleTest {

    @Mock
    private TransactionalReferenceDataService transactionalReferenceDataService;

    @Mock
    private LoadCacheMapDataVerticle loadCacheMapDataVerticle;

    @Mock
    private DBHealthCheckVerticle dbHealthCheckVerticle;

    @Mock
    private Marker mockMarker;

    private Vertx vertx;
    private DBComponentVerticle dbComponentVerticle;
    private JsonObject config;

    @Before
    public void setUp() {
        MockitoAnnotations.initMocks(this);
        vertx = Vertx.vertx(); // Manually initialize Vert.x instance
        config = new JsonObject().put("classMarker", new JsonObject()); // Add a dummy marker
        dbComponentVerticle = new DBComponentVerticle();

        // Mock the constructor dependencies
        when(TransactionalReferenceDataService.create(eq(vertx), eq(config), any(Marker.class)))
                .thenReturn(transactionalReferenceDataService);
        when(loadCacheMapDataVerticle.init(eq(vertx), eq(config), eq(transactionalReferenceDataService), any(Marker.class)))
                .thenReturn(Future.succeededFuture());
        when(dbHealthCheckVerticle.init(eq(vertx), eq(config), eq(transactionalReferenceDataService), any(Marker.class)))
                .thenReturn(Future.succeededFuture());
    }

    @Test
    public void testStartVerticleSuccess() throws InterruptedException {
        // Deploy the verticle
        vertx.deployVerticle(dbComponentVerticle, res -> {
            if (res.succeeded()) {
                System.out.println("Deployment succeeded");
                // Assert success
                // You can use assertions or use a custom method to verify the successful start
            } else {
                res.cause().printStackTrace();
                fail("Deployment failed: " + res.cause().getMessage());
            }
        });

        // Allow the deployment to finish before ending the test
        Thread.sleep(2000); // You can replace this with a better async approach if necessary
    }

    @Test
    public void testStartVerticleFailure() {
        // Simulate an error in the start method.
        when(loadCacheMapDataVerticle.init(any(), any(), any(), any()))
            .thenReturn(Future.failedFuture(new RuntimeException("Deployment failed")));

        vertx.deployVerticle(dbComponentVerticle, res -> {
            if (res.failed()) {
                System.out.println("Deployment failed as expected");
                // Test that the failure is handled
            } else {
                fail("Deployment should have failed");
            }
        });
    }

    @Test
    public void testStopVerticle() {
        // Simulate stopping the verticle
        dbComponentVerticle.stop(Promise.promise());

        dbComponentVerticle.stop(Promise.promise())
            .onComplete(result -> {
                if (result.succeeded()) {
                    System.out.println("Verticle stopped successfully");
                } else {
                    result.cause().printStackTrace();
                    fail("Expected stop to succeed");
                }
            });
    }
}


18:20:49  	at com.aexp.gmdl.db.component.verticle.InitializeDBComponentImplTest.lambda$testInitializeDBComponentAsVerticle$0(InitializeDBComponentImplTest.java:45)
18:20:49  	at org.mockito.internal.stubbing.StubbedInvocationMatcher.answer(StubbedInvocationMatcher.java:39)
18:20:49  	at org.mockito.internal.handler.MockHandlerImpl.handle(MockHandlerImpl.java:96)
18:20:49  	at org.mockito.internal.handler.NullResultGuardian.handle(NullResultGuardian.java:29)
18:20:49  	at org.mockito.internal.handler.InvocationNotifierHandler.handle(InvocationNotifierHandler.java:33)
18:20:49  	at org.mockito.internal.creation.bytebuddy.MockMethodInterceptor.doIntercept(MockMethodInterceptor.java:61)
18:20:49  	at org.mockito.internal.creation.bytebuddy.MockMethodInterceptor.doIntercept(MockMethodInterceptor.java:49)
18:20:49  	at org.mockito.internal.creation.bytebuddy.MockMethodInterceptor$DispatcherDefaultingToRealMethod.interceptAbstract(MockMethodInterceptor.java:126)
18:20:49  	at io.vertx.core.Vertx$MockitoMock$761909505.deployVerticle(Unknown Source)
18:20:49  	at com.aexp.gmdl.db.component.verticle.InitializeDBComponentImpl.initializeAsVerticle(InitializeDBComponentImpl.java:65)
18:20:49  	at com.aexp.gmdl.db.component.verticle.InitializeDBComponentImpl.initializeDBComponent(InitializeDBComponentImpl.java:47)
18:20:49  	at com.aexp.gmdl.db.component.verticle.InitializeDBComponentImplTest.testInitializeDBComponentAsVerticle(InitializeDBComponentImplTest.java:53)
18:20:49  	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
18:20:49  	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
18:20:49  	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
18:20:49  	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
18:20:49  	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
18:20:49  	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
18:20:49  	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
18:20:49  	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
18:20:49  	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
18:20:49  	at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
18:20:49  	at org.junit.runners.BlockJUnit4ClassRunner$1.evaluate(BlockJUnit4ClassRunner.java:100)
18:20:49  	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:366)
18:20:49  	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:103)
18:20:49  	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:63)
18:20:49  	at org.junit.runners.ParentRunner$4.run(ParentRunner.java:331)
18:20:49  	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:79)
18:20:49  	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:329)
18:20:49  	at org.junit.runners.ParentRunner.access$100(ParentRunner.java:66)
18:20:49  	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:293)
18:20:49  	at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
18:20:49  	at org.junit.runners.ParentRunner.run(ParentRunner.java:413)
18:20:49  	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:365)
18:20:49  	at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:273)
18:20:49  	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:238)
18:20:49  	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:159)
18:20:49  	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:384)
18:20:49  	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:345)
18:20:49  	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:126)
18:20:49  	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:418)
18:20:49  
18:20:49  [ERROR] Tests run: 3, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 0.377 s <<< FAILURE! - in com.aexp.gmdl.db.component.verticle.InitializeDBComponentImplTest
18:20:49  [ERROR] testInitializeDBComponentAsDirectInstance(com.aexp.gmdl.db.component.verticle.InitializeDBComponentImplTest)  Time elapsed: 0.171 s  <<< ERROR!
