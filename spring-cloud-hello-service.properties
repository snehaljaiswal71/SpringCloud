import io.vertx.core.Vertx;
import io.vertx.core.eventbus.Message;
import io.vertx.core.json.JsonArray;
import io.vertx.core.json.JsonObject;
import io.vertx.ext.unit.Async;
import io.vertx.ext.unit.TestContext;
import io.vertx.ext.unit.junit.VertxUnitRunner;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mockito;

import static org.mockito.Mockito.*;

@RunWith(VertxUnitRunner.class)
public class ReadUnifiedMerchantDemographicsVerticleTest {

    private Vertx vertx;
    private ReadUnifiedMerchantDemographicsVerticle verticle;

    @Before
    public void setUp(TestContext context) {
        vertx = Vertx.vertx();
        verticle = new ReadUnifiedMerchantDemographicsVerticle();

        vertx.deployVerticle(verticle, context.asyncAssertSuccess());
    }

    @After
    public void tearDown(TestContext context) {
        vertx.close(context.asyncAssertSuccess());
    }

    @Test
    public void testHandleValidRequest(TestContext context) {
        Async async = context.async();

        JsonObject coreAttributes = new JsonObject()
                .put("merchantIdentifierList", new JsonArray().add("MID123"));

        JsonObject request = new JsonObject()
                .put("coreAttributes", coreAttributes)
                .put("responseFilter", new JsonArray());

        Message<JsonObject> message = mock(Message.class);
        when(message.body()).thenReturn(request);
        when(message.headers()).thenReturn(MultiMap.caseInsensitiveMultiMap()
                .add("ONE-DATA-CORRELATION-ID", "test-corr-id")
                .add("CHANNEL", "GNS"));

        doAnswer(invocation -> {
            JsonArray response = invocation.getArgument(0);
            System.out.println("Mocked reply: " + response.encodePrettily());
            async.complete();
            return null;
        }).when(message).reply(any(JsonArray.class), any());

        verticle.handle(message);
    }
}
