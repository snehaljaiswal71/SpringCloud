import io.vertx.core.Future;
import io.vertx.core.Promise;
import io.vertx.core.json.JsonObject;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class ValidatorServiceImplTest {

    private ValidatorDirectInstance mockValidatorDirectInstance;
    private ValidatorServiceImpl validatorService;
    private static final Logger LOGGER = LoggerFactory.getLogger(ValidatorServiceImplTest.class);

    @BeforeEach
    void setUp() {
        mockValidatorDirectInstance = mock(ValidatorDirectInstance.class);
        validatorService = new ValidatorServiceImpl(mockValidatorDirectInstance);
    }

    @Test
    void callToValidatorJar_success() {
        // Arrange
        JsonObject input = new JsonObject().put("key", "value");
        String batchCorrelationId = "12345";
        String address = "testAddress";

        JsonObject mockResult = new JsonObject().put("status", "success");
        Promise<JsonObject> mockPromise = Promise.promise();
        mockPromise.complete(mockResult);
        when(mockValidatorDirectInstance.processData(any(JsonObject.class), isNull())).thenReturn(mockPromise.future());

        // Act
        Future<JsonObject> result = validatorService.callToValidatorJar(input, batchCorrelationId, address);

        // Assert
        assertTrue(result.succeeded());
        assertEquals("success", result.result().getString("status"));
        verify(mockValidatorDirectInstance, times(1)).processData(input, null);
    }

    @Test
    void callToValidatorJar_failure() {
        // Arrange
        JsonObject input = new JsonObject().put("key", "value");
        String batchCorrelationId = "12345";
        String address = "testAddress";

        Throwable mockException = new RuntimeException("Test Exception");
        Promise<JsonObject> mockPromise = Promise.promise();
        mockPromise.fail(mockException);
        when(mockValidatorDirectInstance.processData(any(JsonObject.class), isNull())).thenReturn(mockPromise.future());

        // Act
        Future<JsonObject> result = validatorService.callToValidatorJar(input, batchCorrelationId, address);

        // Assert
        assertTrue(result.failed());
        assertEquals("Test Exception", result.cause().getMessage());
        verify(mockValidatorDirectInstance, times(1)).processData(input, null);
    }

    @Test
    void callToValidatorJar_validatorDirectInstanceNull() {
        // Arrange
        validatorService = new ValidatorServiceImpl(null); // Reset with null instance
        JsonObject input = new JsonObject().put("key", "value");
        String batchCorrelationId = "12345";
        String address = "testAddress";

        // Act
        Future<JsonObject> result = validatorService.callToValidatorJar(input, batchCorrelationId, address);

        // Assert
        assertTrue(result.failed());
        assertEquals("validatorDirectInstance in ValidatorServiceImpl is null", result.cause().getMessage());
    }

    @Test
    void callToValidatorJar_exception() {
        // Arrange
        JsonObject input = new JsonObject().put("key", "value");
        String batchCorrelationId = "12345";
        String address = "testAddress";

        when(mockValidatorDirectInstance.processData(any(JsonObject.class), isNull()))
            .thenThrow(new RuntimeException("Simulated Exception"));

        // Act
        Future<JsonObject> result = validatorService.callToValidatorJar(input, batchCorrelationId, address);

        // Assert
        assertTrue(result.failed());
        assertEquals("Simulated Exception", result.cause().getMessage());
    }
}
