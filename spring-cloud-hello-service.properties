import io.vertx.ext.unit.TestContext;
import io.vertx.ext.unit.junit.VertxUnitRunner;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;

import java.util.Properties;

import static org.mockito.Mockito.*;

@RunWith(VertxUnitRunner.class)
public class RTFClientFactoryTest {

    @Mock
    private Properties mockProperties;

    @Before
    public void setUp() throws Exception {
        MockitoAnnotations.openMocks(this);
        // Reset the singleton instance to null before each test
        java.lang.reflect.Field field = RTFClientFactory.class.getDeclaredField("rtfClient");
        field.setAccessible(true);
        field.set(null, null);
    }

    @Test
    public void testGetRtfClient_FirstCallCreatesInstance(TestContext context) throws Exception {
        // Arrange
        RtfClientBuilder mockBuilder = mock(RtfClientBuilder.class);
        RtfClient mockClient = mock(RtfClient.class);

        when(RtfClientBuilder.newBuilder()).thenReturn(mockBuilder);
        when(mockBuilder.withProperties(mockProperties)).thenReturn(mockBuilder);
        when(mockBuilder.addDispatchAgentMap(any(), any())).thenReturn(mockBuilder);
        when(mockBuilder.build()).thenReturn(mockClient);

        // Act
        RtfClient client = RTFClientFactory.getRtfClient(mockProperties);

        // Assert
        context.assertNotNull(client);
        context.assertEquals(mockClient, client);
    }
}
