import io.vertx.core.*;
import io.vertx.core.json.JsonObject;
import org.junit.Before;
import org.junit.Test;
import org.mockito.*;
import org.slf4j.Marker;

import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

public class InitializeDBComponentImplTest {

    @InjectMocks
    private InitializeDBComponentImpl initializeDBComponent;

    @Mock
    private Vertx mockVertx;

    @Mock
    private Marker mockMarker;

    private DeploymentOptions mockDeploymentOptions;

    @Before
    public void setUp() {
        MockitoAnnotations.initMocks(this);
        initializeDBComponent = new InitializeDBComponentImpl();
        mockDeploymentOptions = new DeploymentOptions();
    }

    /**
     * Test for initializeDBComponent with verticle approach enabled.
     */
    @Test
    public void testInitializeDBComponentAsVerticle() {
        // Arrange
        JsonObject config = new JsonObject()
                .put("common", new JsonObject()
                        .put("db.jar.verticle.approach.active", true));

        Verticle mockVerticle = mock(Verticle.class); // Mocking Verticle
        Handler<AsyncResult<String>> mockHandler = mock(Handler.class); // Mocking Handler

        // Mocking deployVerticle
        doAnswer(invocation -> {
            Handler<AsyncResult<String>> handler = invocation.getArgument(2);
            handler.handle(Future.succeededFuture("DeploymentID")); // Simulating success
            return null;
        }).when(mockVertx).deployVerticle(
                Mockito.any(Verticle.class),
                Mockito.any(DeploymentOptions.class),
                Mockito.any(Handler.class)
        );

        // Act
        Future<DBComponentDirectInstance> future = initializeDBComponent.initializeDBComponent(mockVertx, config, mockMarker);

        // Assert
        assertNotNull(future);
        assertTrue(future.succeeded());
    }

    /**
     * Test for initializeDBComponent with direct instance approach enabled.
     */
    @Test
    public void testInitializeDBComponentAsDirectInstance() {
        // Arrange
        JsonObject config = new JsonObject()
                .put("common", new JsonObject()
                        .put("db.jar.verticle.approach.active", false));

        DBComponentDirectInstance mockDBComponentDirectInstance = mock(DBComponentDirectInstance.class);

        // Mock the behaviour of the `init` method.
        when(mockDBComponentDirectInstance.init(any(Vertx.class), any(JsonObject.class), any(Marker.class)))
                .thenReturn(Future.succeededFuture(mockDBComponentDirectInstance));

        // Act
        Future<DBComponentDirectInstance> future = initializeDBComponent.initializeDBComponent(mockVertx, config, mockMarker);

        // Assert
        assertNotNull(future);
        assertTrue(future.succeeded());
    }

    /**
     * Test for initializeDBComponent with invalid configuration.
     */
    @Test
    public void testInitializeDBComponentWithInvalidConfig() {
        // Arrange
        JsonObject invalidConfig = new JsonObject(); // No "common" config provided.

        // Act
        Future<DBComponentDirectInstance> future = initializeDBComponent.initializeDBComponent(mockVertx, invalidConfig, mockMarker);

        // Assert
        assertNotNull(future);
        assertTrue(future.failed());
    }
}
