import io.vertx.core.*;
import io.vertx.core.json.JsonObject;
import org.junit.Before;
import org.junit.Test;
import org.mockito.*;
import org.slf4j.Logger;
import org.slf4j.Marker;

import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

public class InitializeDBComponentImplTest {

    @InjectMocks
    private InitializeDBComponentImpl initializeDBComponent;

    @Mock
    private Vertx mockVertx;

    @Mock
    private Marker mockMarker;

    @Mock
    private DeploymentOptions mockDeploymentOptions;

    @Captor
    private ArgumentCaptor<Handler<AsyncResult<String>>> handlerCaptor;

    @Before
    public void setUp() {
        MockitoAnnotations.initMocks(this);
    }

    /**
     * Test for initializeDBComponent when Verticle approach is active
     */
    @Test
    public void testInitializeDBComponent_VerticleApproachActive() {
        // Arrange
        JsonObject config = new JsonObject()
            .put("lambda-config.json", new JsonObject().put("key1", "value1"))
            .put("common", new JsonObject().put("db.jar.verticle.approach.active", true));

        doAnswer(invocation -> {
            Handler<AsyncResult<String>> handler = invocation.getArgument(2);
            handler.handle(Future.succeededFuture("DeploymentID"));
            return null;
        }).when(mockVertx).deployVerticle(anyString(), any(DeploymentOptions.class), any());

        // Act
        Future<DBComponentDirectInstance> future =
            initializeDBComponent.initializeDBComponent(mockVertx, config, mockMarker);

        // Assert
        assertNotNull(future);
        assertTrue(future.succeeded());
    }

    /**
     * Test for initializeDBComponent when Verticle approach is inactive
     */
    @Test
    public void testInitializeDBComponent_DirectInstanceApproach() {
        // Arrange
        JsonObject config = new JsonObject()
            .put("lambda-config.json", new JsonObject().put("key1", "value1"))
            .put("common", new JsonObject().put("db.jar.verticle.approach.active", false));

        DBComponentDirectInstance mockDBComponentDirectInstance = mock(DBComponentDirectInstance.class);

        doReturn(Future.succeededFuture(mockDBComponentDirectInstance))
            .when(mockDBComponentDirectInstance).init(any(Vertx.class), any(JsonObject.class), any(Marker.class));

        // Act
        Future<DBComponentDirectInstance> future =
            initializeDBComponent.initializeDBComponent(mockVertx, config, mockMarker);

        // Assert
        assertNotNull(future);
        assertTrue(future.succeeded());
    }

    /**
     * Test for initializeAsVerticle
     */
    @Test
    public void testInitializeAsVerticle() {
        // Arrange
        JsonObject config = new JsonObject().put("key", "value");
        initializeDBComponent = spy(new InitializeDBComponentImpl());
        ReflectionTestUtils.setField(initializeDBComponent, "config", config);
        ReflectionTestUtils.setField(initializeDBComponent, "vertx", mockVertx);

        doAnswer(invocation -> {
            Handler<AsyncResult<String>> handler = invocation.getArgument(2);
            handler.handle(Future.succeededFuture("DeploymentID"));
            return null;
        }).when(mockVertx).deployVerticle(any(), any(DeploymentOptions.class), any());

        // Act
        Future<DBComponentDirectInstance> future = initializeDBComponent.initializeAsVerticle(mockMarker);

        // Assert
        assertNotNull(future);
        assertTrue(future.succeeded());
    }

    /**
     * Test for initializeAsDirectInstance
     */
    @Test
    public void testInitializeAsDirectInstance() {
        // Arrange
        JsonObject config = new JsonObject().put("key", "value");
        initializeDBComponent = spy(new InitializeDBComponentImpl());
        ReflectionTestUtils.setField(initializeDBComponent, "config", config);
        ReflectionTestUtils.setField(initializeDBComponent, "vertx", mockVertx);

        DBComponentDirectInstance mockDBComponentDirectInstance = mock(DBComponentDirectInstance.class);

        doReturn(Future.succeededFuture(mockDBComponentDirectInstance))
            .when(mockDBComponentDirectInstance).init(any(Vertx.class), any(JsonObject.class), any(Marker.class));

        // Act
        Future<DBComponentDirectInstance> future = initializeDBComponent.initializeAsDirectInstance(mockMarker);

        // Assert
        assertNotNull(future);
        assertTrue(future.succeeded());
    }

    /**
     * Test for initializeDBComponent with invalid config
     */
    @Test
    public void testInitializeDBComponent_InvalidConfig() {
        // Arrange
        JsonObject config = new JsonObject(); // Empty config to trigger the exception

        // Act
        Future<DBComponentDirectInstance> future =
            initializeDBComponent.initializeDBComponent(mockVertx, config, mockMarker);

        // Assert
        assertNotNull(future);
        assertTrue(future.failed());
    }
}
