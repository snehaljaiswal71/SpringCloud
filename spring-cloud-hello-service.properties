import com.axp.microdose.unified.merchant.read.demographics.data.DemographicsDetailDbAction;
import com.aexp.gmdl.db.component.service.DbAction;
import com.axp.logging.schema.v0_1.Structured;
import io.vertx.core.Vertx;
import io.vertx.core.json.JsonArray;
import io.vertx.core.json.JsonObject;
import io.vertx.ext.unit.Async;
import io.vertx.ext.unit.TestContext;
import io.vertx.ext.unit.junit.VertxUnitRunner;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;

import static org.junit.Assert.*;

@RunWith(VertxUnitRunner.class)
public class DemographicsDetailDbActionTest {

    private DemographicsDetailDbAction dbAction;

    @Before
    public void setup() {
        Structured mockMarker = Structured.builder().build(); // You can mock more as needed
        dbAction = new DemographicsDetailDbAction(mockMarker, "TEST_CHANNEL");
    }

    @Test
    public void testSetParams_withValidInput(TestContext context) {
        Async async = context.async();

        JsonObject request = new JsonObject()
            .put("CORE_ATTRIBUTES", new JsonObject()
                .put("merchantIdentifierList", new JsonArray().add("MID1").add("MID2"))
                .put("ainNumber", "123456")
                .put("srceSysId", "SRC123")
                .put("busCtrCd", "BUS789"))
            .put("DEMOGRAPHIC_ATTRIBUTES", new JsonObject()
                .put("setIdentifier", "SETID")
                .put("settlementTypeCode", "TYPE1")
                .put("payee1", "PAYEE123"));

        String baseQuery = "SELECT * FROM demo WHERE se_no IN (seNumbers)";

        dbAction.setParams(baseQuery, request).onComplete(ar -> {
            if (ar.succeeded()) {
                // Verify SQL query and parameters
                String actualQuery = dbAction.getQuery();
                JsonArray actualParams = dbAction.getParams();

                context.assertTrue(actualQuery.contains("WHERE"));
                context.assertTrue(actualQuery.contains("IN (?, ?)"));

                context.assertEquals(2, actualParams.size()); // This will vary depending on request
                async.complete();
            } else {
                context.fail(ar.cause());
            }
        });
    }
}
