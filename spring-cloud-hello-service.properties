import com.axp.microdose.unified.merchant.read.demographics.data.DemographicsDetailDbAction;
import io.vertx.core.Future;
import io.vertx.core.Promise;
import io.vertx.core.json.JsonArray;
import io.vertx.core.json.JsonObject;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.slf4j.Logger;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

public class DemographicsDetailDbActionTest {

    @InjectMocks
    private DemographicsDetailDbAction demographicsDetailDbAction;

    @Mock
    private Structured msgMarker;

    @Mock
    private Logger log;

    @Mock
    private JsonObject request;

    @Mock
    private JsonObject coreAttributes;

    @Mock
    private JsonArray merchantIdentifierList;

    @Mock
    private JsonObject demographicSearchObject;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
        demographicsDetailDbAction = new DemographicsDetailDbAction(msgMarker, "testChannel");
    }

    @Test
    void testSetParams_Success() {
        // Mocking the request and its core attributes
        when(request.getJsonObject("coreAttributes")).thenReturn(coreAttributes);
        when(coreAttributes.getJsonArray("merchantIdentifierList")).thenReturn(merchantIdentifierList);
        when(merchantIdentifierList.isEmpty()).thenReturn(false);
        when(merchantIdentifierList.size()).thenReturn(3);

        // Mock demographic search object
        when(request.getJsonObject("demographicAttributes")).thenReturn(demographicSearchObject);

        // Mocking methods to return non-empty or valid values
        when(demographicSearchObject.getString("settle_set_id")).thenReturn("settle123");
        when(demographicSearchObject.getString("settle_set_type_cd")).thenReturn("typeCode123");
        when(demographicSearchObject.getString("payee_1_mer_id")).thenReturn("payee123");

        // Running the setParams method
        Future<Void> future = demographicsDetailDbAction.setParams("SELECT * FROM demographics WHERE seNumbers = seNumbers", request);

        // Verifying that the future is completed successfully
        future.onComplete(ar -> {
            assertTrue(ar.succeeded());
            assertNotNull(demographicsDetailDbAction.query);  // Ensure query is set
            assertTrue(demographicsDetailDbAction.query.contains("settle_set_id = ?"));
        });
    }

    @Test
    void testSetParams_MissingMerchantIdentifierList() {
        // Mocking the request and returning an empty list
        when(request.getJsonObject("coreAttributes")).thenReturn(coreAttributes);
        when(coreAttributes.getJsonArray("merchantIdentifierList")).thenReturn(new JsonArray());

        // Running the setParams method and expecting failure due to missing required parameter
        Future<Void> future = demographicsDetailDbAction.setParams("SELECT * FROM demographics WHERE seNumbers = seNumbers", request);

        future.onComplete(ar -> {
            assertTrue(ar.failed());
            assertEquals("Params not configured correctly", ar.cause().getMessage());
        });
    }

    @Test
    void testSetParams_InvalidParameter() {
        // Simulate an invalid core attribute to trigger exception
        when(request.getJsonObject("coreAttributes")).thenReturn(coreAttributes);
        when(coreAttributes.getJsonArray("merchantIdentifierList")).thenReturn(merchantIdentifierList);
        when(merchantIdentifierList.isEmpty()).thenReturn(false);
        when(merchantIdentifierList.size()).thenReturn(3);

        // Simulate an invalid demographic search object that throws an exception
        when(request.getJsonObject("demographicAttributes")).thenReturn(new JsonObject());

        // Running the setParams method and expecting failure
        Future<Void> future = demographicsDetailDbAction.setParams("SELECT * FROM demographics WHERE seNumbers = seNumbers", request);

        future.onComplete(ar -> {
            assertTrue(ar.failed());
            assertEquals("Params not configured correctly", ar.cause().getMessage());
        });
    }

    @Test
    void testSetParams_OptionalParameters() {
        // Setup mock core attributes and parameters
        when(request.getJsonObject("coreAttributes")).thenReturn(coreAttributes);
        when(coreAttributes.getJsonArray("merchantIdentifierList")).thenReturn(merchantIdentifierList);
        when(merchantIdentifierList.isEmpty()).thenReturn(false);
        when(merchantIdentifierList.size()).thenReturn(3);

        // Mock the presence of optional parameters
        when(coreAttributes.getString("acquiringInstitutionIdentificationNumber")).thenReturn("AIN123");
        when(coreAttributes.getString("sourceSystemIdentifier")).thenReturn("SRC123");
        when(coreAttributes.getString("businessCenterCode")).thenReturn("BUS123");

        // Running the setParams method
        Future<Void> future = demographicsDetailDbAction.setParams("SELECT * FROM demographics WHERE seNumbers = seNumbers", request);

        future.onComplete(ar -> {
            assertTrue(ar.succeeded());
            assertNotNull(demographicsDetailDbAction.query);
            assertTrue(demographicsDetailDbAction.query.contains("AIN123"));
            assertTrue(demographicsDetailDbAction.query.contains("SRC123"));
            assertTrue(demographicsDetailDbAction.query.contains("BUS123"));
        });
    }
}
