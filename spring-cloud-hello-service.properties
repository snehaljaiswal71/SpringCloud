package com.aexp.gmdl.db.component.verticle;

import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

import io.vertx.core.*;
import io.vertx.core.json.JsonObject;
import org.junit.Before;
import org.junit.Test;
import org.slf4j.Marker;

public class InitializeDBComponentImplTest {

  private InitializeDBComponentImpl initializeDBComponent;
  private Vertx vertxMock;
  private JsonObject configMock;
  private Marker markerMock;

  @Before
  public void setup() {
    vertxMock = mock(Vertx.class);
    configMock = mock(JsonObject.class);
    markerMock = mock(Marker.class);
    initializeDBComponent = new InitializeDBComponentImpl();
  }

  @Test
  public void testInitializeDBComponentAsVerticle() {
    JsonObject config = new JsonObject();
    JsonObject commonConfig = new JsonObject().put("db.jar.verticle.approach.active", true);
    config.put("common", commonConfig);
    config.put("lambda-config.json", commonConfig);

    when(configMock.getJsonObject("lambda-config.json", new JsonObject())).thenReturn(commonConfig);
    when(configMock.getJsonObject("common", new JsonObject())).thenReturn(commonConfig);

    DeploymentOptions deploymentOptionsMock = mock(DeploymentOptions.class);
    when(deploymentOptionsMock.setConfig(any())).thenReturn(deploymentOptionsMock);

    doAnswer(
            invocation -> {
              Promise<DBComponentDirectInstance> promise = invocation.getArgument(2);
              promise.complete(new DBComponentDirectInstance());
              return null;
            })
        .when(vertxMock)
        .deployVerticle(any(DBComponentVerticle.class), any(DeploymentOptions.class), any(Handler.class));

    Future<DBComponentDirectInstance> result =
        initializeDBComponent.initializeDBComponent(vertxMock, config, markerMock);

    assertNotNull(result);

  }

  @Test
  public void testInitializeDBComponentAsDirectInstance() {
    JsonObject config = new JsonObject();
    JsonObject commonConfig = new JsonObject().put("db.jar.verticle.approach.active", false);
    config.put("common", commonConfig);

    when(configMock.getJsonObject("common", new JsonObject())).thenReturn(commonConfig);

    DBComponentDirectInstance dbComponentDirectInstanceMock = mock(DBComponentDirectInstance.class);
    when(dbComponentDirectInstanceMock.init(any(Vertx.class), any(JsonObject.class), any(Marker.class)))
        .thenReturn(Future.succeededFuture());

    Future<DBComponentDirectInstance> result =
        initializeDBComponent.initializeDBComponent(vertxMock, config, markerMock);

    assertNotNull(result);

  }

  @Test
  public void testInitializeDBComponentWithInvalidConfig() {
    JsonObject invalidConfig = null;

    Future<DBComponentDirectInstance> result =
        initializeDBComponent.initializeDBComponent(vertxMock, invalidConfig, markerMock);

    assertNotNull(result);
    assertTrue(result.failed());
  }
}
