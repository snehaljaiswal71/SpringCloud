import io.vertx.core.*;
import io.vertx.core.json.JsonObject;
import io.vertx.junit5.VertxExtension;
import io.vertx.junit5.VertxTestContext;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.*;
import org.slf4j.Marker;

import static org.mockito.Mockito.*;

@RunWith(VertxExtension.class)
public class DBComponentVerticleTest {

    @Mock
    private TransactionalReferenceDataService transactionalReferenceDataService;

    @Mock
    private LoadCacheMapDataVerticle loadCacheMapDataVerticle;

    @Mock
    private DBHealthCheckVerticle dbHealthCheckVerticle;

    @Mock
    private Marker mockMarker;

    private Vertx vertx;
    private DBComponentVerticle dbComponentVerticle;
    private JsonObject config;

    @Before
    public void setUp() {
        MockitoAnnotations.initMocks(this);
        vertx = Vertx.vertx();
        config = new JsonObject().put("classMarker", new JsonObject()); // Add a dummy marker
        dbComponentVerticle = new DBComponentVerticle();

        // Mock the constructor dependencies
        when(TransactionalReferenceDataService.create(eq(vertx), eq(config), any(Marker.class)))
                .thenReturn(transactionalReferenceDataService);
        when(loadCacheMapDataVerticle.init(eq(vertx), eq(config), eq(transactionalReferenceDataService), any(Marker.class)))
                .thenReturn(Future.succeededFuture());
        when(dbHealthCheckVerticle.init(eq(vertx), eq(config), eq(transactionalReferenceDataService), any(Marker.class)))
                .thenReturn(Future.succeededFuture());
    }

    @Test
    public void testStartVerticleSuccess(VertxTestContext testContext) {
        dbComponentVerticle.start(Promise.promise());

        // Assert that the start promise was completed successfully.
        dbComponentVerticle.start(Promise.promise())
            .onComplete(result -> {
                if (result.succeeded()) {
                    testContext.completeNow();
                } else {
                    testContext.failNow(result.cause());
                }
            });
    }

    @Test
    public void testStartVerticleFailure(VertxTestContext testContext) {
        // Simulate an error in start method.
        when(loadCacheMapDataVerticle.init(any(), any(), any(), any()))
            .thenReturn(Future.failedFuture(new RuntimeException("Deployment failed")));

        dbComponentVerticle.start(Promise.promise())
            .onComplete(result -> {
                if (result.failed()) {
                    testContext.completeNow();
                } else {
                    testContext.failNow(new Exception("Expected failure"));
                }
            });
    }

    @Test
    public void testStopVerticle(VertxTestContext testContext) {
        dbComponentVerticle.stop(Promise.promise());

        dbComponentVerticle.stop(Promise.promise())
            .onComplete(result -> {
                if (result.succeeded()) {
                    testContext.completeNow();
                } else {
                    testContext.failNow(new Exception("Expected stop to succeed"));
                }
            });
    }
}
