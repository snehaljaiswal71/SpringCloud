@RunWith(VertxUnitRunner.class)
public class ReadUnifiedMerchantDemographicsNewVerticleTest {

  private Vertx vertx;
  private ReadUnifiedMerchantDemographicsNewVerticle verticle;

  @Before
  public void setUp(TestContext context) {
    vertx = Vertx.vertx();

    // Mock your static utility methods like InitializeDBComponent
    MockedStatic<InitializeDBComponent> dbComponentMock = Mockito.mockStatic(InitializeDBComponent.class);
    Promise<Void> dbInitPromise = Promise.promise();
    dbInitPromise.complete(); // Simulate successful DB init
    dbComponentMock.when(() ->
        InitializeDBComponent.initializeDBComponent(Mockito.any(), Mockito.any(), Mockito.any())
    ).thenReturn(dbInitPromise.future());

    // Mock TransactionalReferenceDataService
    TransactionalReferenceDataService mockService = Mockito.mock(TransactionalReferenceDataService.class);
    MockedStatic<TransactionalReferenceDataService> dataServiceMock = Mockito.mockStatic(TransactionalReferenceDataService.class);
    dataServiceMock.when(() -> TransactionalReferenceDataService.create(
            Mockito.any(), Mockito.any(), Mockito.any(), Mockito.any())
    ).thenReturn(mockService);

    // Prepare minimal config for testing
    JsonObject lambdaConfig = new JsonObject()
            .put("decryption", new JsonObject())
            .put("postgres-config", new JsonObject()
                .put("gcharcore", new JsonObject()
                    .put("primary", new JsonObject()
                        .put("user", "test-user"))));

    JsonObject config = new JsonObject()
            .put("lambda-config", lambdaConfig);

    vertx.deployVerticle(() -> {
      verticle = new ReadUnifiedMerchantDemographicsNewVerticle();
      return verticle;
    }, new DeploymentOptions().setConfig(config), context.asyncAssertSuccess());
  }

  @After
  public void tearDown(TestContext context) {
    vertx.close(context.asyncAssertSuccess());
  }

  @Test
  public void testValidRequestHandling(TestContext context) throws Exception {
    final Async async = context.async();

    // Sample valid request
    JsonObject request = new JsonObject()
            .put("someField", "someValue"); // Fill based on expected schema

    vertx.eventBus().consumer("ReadUnifiedMerchantDemographics.sor.v2", message -> {
      JsonObject response = (JsonObject) message.body();
      context.assertNotNull(response);
      async.complete();
    });

    vertx.eventBus().request("ReadUnifiedMerchantDemographics.sor.v2", request);
  }
}
üìù Notes:
