package com.axp.microdose.unified.merchant.read.demographics.sor;

import com.aexp.gmdl.db.component.service.TransactionalReferenceDataService;
import com.axp.microdose.unified.merchant.read.demographics.util.DemographicsConstants;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.vertx.core.*;
import io.vertx.core.eventbus.DeliveryOptions;
import io.vertx.core.eventbus.EventBus;
import io.vertx.core.eventbus.MessageConsumer;
import io.vertx.core.eventbus.Message;
import io.vertx.core.json.JsonArray;
import io.vertx.core.json.JsonObject;
import io.vertx.ext.unit.Async;
import io.vertx.ext.unit.TestContext;
import io.vertx.ext.unit.junit.VertxUnitRunner;
import org.apache.http.HttpStatus;
import org.junit.*;
import org.junit.runner.RunWith;
import org.mockito.Mockito;

import java.util.Optional;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

@RunWith(VertxUnitRunner.class)
public class ReadUnifiedMerchantDemographicsVerticleTest {

    private Vertx vertx;
    private ReadUnifiedMerchantDemographicsVerticle verticle;

    @Before
    public void setUp(TestContext context) {
        vertx = Vertx.vertx();
        verticle = Mockito.spy(new ReadUnifiedMerchantDemographicsVerticle());

        JsonObject config = new JsonObject()
                .put("postgres-config", new JsonObject()
                    .put("gcharcore", new JsonObject()
                        .put("primary", new JsonObject()
                            .put("user", "test-user"))));

        DeploymentOptions options = new DeploymentOptions().setConfig(config);

        vertx.deployVerticle(verticle, options, context.asyncAssertSuccess());
    }

    @After
    public void tearDown(TestContext context) {
        vertx.close(context.asyncAssertSuccess());
    }

    @Test
    public void testHandle_withValidRequest_returnsSuccess(TestContext context) {
        Async async = context.async();

        JsonObject request = new JsonObject()
                .put("coreAttributes", new JsonObject()
                        .put("merchantIdentifierList", new JsonArray().add("MID123")));

        DeliveryOptions options = new DeliveryOptions()
                .addHeader(DemographicsConstants.CHANNEL, "GNS")
                .addHeader("ONE_DATA_CORRELATION_ID", "test-corr-id");

        // Listen for the response
        EventBus eventBus = vertx.eventBus();
        eventBus.consumer("ReadUnifiedMerchantDemographics.sor.v1.reply", reply -> {
            JsonArray response = (JsonArray) reply.body();
            context.assertNotNull(response);
            async.complete();
        });

        // Send message to verticle
        vertx.setTimer(1000, id -> {
            eventBus.request("ReadUnifiedMerchantDemographics.sor.v1", request, options, ar -> {
                if (ar.succeeded()) {
                    // Manually forward to reply address
                    eventBus.publish("ReadUnifiedMerchantDemographics.sor.v1.reply", ar.result().body());
                } else {
                    context.fail(ar.cause());
                }
            });
        });
    }
}

17:55:48.993 [Test worker] DEBUG io.netty.util.internal.logging.InternalLoggerFactory - Using SLF4J as the default logging framework
17:55:49.024 [Test worker] DEBUG io.netty.util.ResourceLeakDetector - -Dio.netty.leakDetection.level: simple
17:55:49.025 [Test worker] DEBUG io.netty.util.ResourceLeakDetector - -Dio.netty.leakDetection.targetRecords: 4
17:55:49.161 [Test worker] DEBUG io.netty.util.internal.InternalThreadLocalMap - -Dio.netty.threadLocalMap.stringBuilder.initialSize: 1024
17:55:49.162 [Test worker] DEBUG io.netty.util.internal.InternalThreadLocalMap - -Dio.netty.threadLocalMap.stringBuilder.maxSize: 4096
17:55:49.237 [Test worker] DEBUG io.netty.channel.MultithreadEventLoopGroup - -Dio.netty.eventLoopThreads: 8
17:55:49.321 [Test worker] DEBUG io.netty.util.concurrent.GlobalEventExecutor - -Dio.netty.globalEventExecutor.quietPeriodSeconds: 1
17:55:49.542 [Test worker] DEBUG io.netty.util.internal.PlatformDependent0 - -Dio.netty.noUnsafe: false
17:55:49.542 [Test worker] DEBUG io.netty.util.internal.PlatformDependent0 - Java version: 11
17:55:49.549 [Test worker] DEBUG io.netty.util.internal.PlatformDependent0 - sun.misc.Unsafe.theUnsafe: available
17:55:49.552 [Test worker] DEBUG io.netty.util.internal.PlatformDependent0 - sun.misc.Unsafe.copyMemory: available
17:55:49.557 [Test worker] DEBUG io.netty.util.internal.PlatformDependent0 - sun.misc.Unsafe.storeFence: available
17:55:49.560 [Test worker] DEBUG io.netty.util.internal.PlatformDependent0 - java.nio.Buffer.address: available
17:55:49.563 [Test worker] DEBUG io.netty.util.internal.PlatformDependent0 - direct buffer constructor: unavailable: Reflective setAccessible(true) disabled
17:55:49.567 [Test worker] DEBUG io.netty.util.internal.PlatformDependent0 - java.nio.Bits.unaligned: available, true
17:55:49.571 [Test worker] DEBUG io.netty.util.internal.PlatformDependent0 - jdk.internal.misc.Unsafe.allocateUninitializedArray(int): unavailable: class io.netty.util.internal.PlatformDependent0$7 cannot access class jdk.internal.misc.Unsafe (in module java.base) because module java.base does not export jdk.internal.misc to unnamed module @1dd0e7c4
17:55:49.575 [Test worker] DEBUG io.netty.util.internal.PlatformDependent0 - java.nio.DirectByteBuffer.<init>(long, int): unavailable
17:55:49.575 [Test worker] DEBUG io.netty.util.internal.PlatformDependent - sun.misc.Unsafe: available
17:55:49.600 [Test worker] DEBUG io.netty.util.internal.PlatformDependent - maxDirectMemory: 536870912 bytes (maybe)
17:55:49.601 [Test worker] DEBUG io.netty.util.internal.PlatformDependent - -Dio.netty.tmpdir: C:\Users\LOCAL_~1\Temp (java.io.tmpdir)
17:55:49.601 [Test worker] DEBUG io.netty.util.internal.PlatformDependent - -Dio.netty.bitMode: 64 (sun.arch.data.model)
17:55:49.601 [Test worker] DEBUG io.netty.util.internal.PlatformDependent - Platform: Windows
17:55:49.609 [Test worker] DEBUG io.netty.util.internal.PlatformDependent - -Dio.netty.maxDirectMemory: -1 bytes
17:55:49.609 [Test worker] DEBUG io.netty.util.internal.PlatformDependent - -Dio.netty.uninitializedArrayAllocationThreshold: -1
17:55:49.616 [Test worker] DEBUG io.netty.util.internal.CleanerJava9 - java.nio.ByteBuffer.cleaner(): available
17:55:49.616 [Test worker] DEBUG io.netty.util.internal.PlatformDependent - -Dio.netty.noPreferDirect: false
17:55:49.621 [Test worker] DEBUG io.netty.channel.nio.NioEventLoop - -Dio.netty.noKeySetOptimization: false
17:55:49.621 [Test worker] DEBUG io.netty.channel.nio.NioEventLoop - -Dio.netty.selectorAutoRebuildThreshold: 512
17:55:49.704 [Test worker] DEBUG io.netty.util.internal.PlatformDependent - org.jctools-core.MpscChunkedArrayQueue: available
17:55:50.137 [Test worker] DEBUG io.netty.resolver.dns.DefaultDnsServerAddressStreamProvider - Default DNS servers: [/10.21.12.89:53, /148.173.250.45:53] (sun.net.dns.ResolverConfiguration)
17:55:50.180 [Test worker] DEBUG io.netty.util.NetUtil - -Djava.net.preferIPv4Stack: false
17:55:50.181 [Test worker] DEBUG io.netty.util.NetUtil - -Djava.net.preferIPv6Addresses: false
17:55:50.270 [Test worker] DEBUG io.netty.util.NetUtilInitializations - Loopback interface: lo (Software Loopback Interface 1, 127.0.0.1)
17:55:50.277 [Test worker] DEBUG io.netty.util.NetUtil - Failed to get SOMAXCONN from sysctl and file \proc\sys\net\core\somaxconn. Default: 200
Apr 15, 2025 5:55:56 PM io.vertx.core.impl.BlockedThreadChecker
WARNING: Thread Thread[vert.x-eventloop-thread-0,5,main]=Thread[vert.x-eventloop-thread-0,5,main] has been blocked for 2007 ms, time limit is 2000 ms

java.lang.NullPointerException
	at com.axp.microdose.config.model.v1.LambdaConfig.getFunctionVersion(LambdaConfig.java:25)
	at com.axp.microdose.data.AbstractMicrodoseVerticle.getFunctionVersion(AbstractMicrodoseVerticle.java:591)
	at com.axp.microdose.data.AbstractMicrodoseVerticle.getApplication(AbstractMicrodoseVerticle.java:553)
	at com.axp.microdose.data.AbstractMicrodoseVerticle.getClassMarker(AbstractMicrodoseVerticle.java:561)
	at com.axp.microdose.data.AbstractMicrodoseVerticle.initialize(AbstractMicrodoseVerticle.java:90)
	at com.axp.microdose.data.AbstractMicrodoseVerticle.init(AbstractMicrodoseVerticle.java:80)
	at io.vertx.core.impl.DeploymentManager.lambda$doDeploy$10(DeploymentManager.java:532)
	at io.vertx.core.impl.ContextImpl.executeTask(ContextImpl.java:366)
	at io.vertx.core.impl.EventLoopContext.lambda$executeAsync$0(EventLoopContext.java:38)
	at io.netty.util.concurrent.AbstractEventExecutor.runTask(AbstractEventExecutor.java:174)
	at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:167)
	at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:470)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:569)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:829)


